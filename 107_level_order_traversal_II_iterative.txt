QUESTION:
107. Binary Tree Level Order Traversal II

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:

[
  [15,7],
  [9,20],
  [3]
]


SOLUTION:
ITERATIVE(MY)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> res;
    vector<vector<int>> levelOrderBottom(TreeNode* root) 
    {
         
       int i=0;
        if(root==NULL)
            return res;
        TreeNode* temp;        
        queue <TreeNode*> q;
        q.push(root);
        res.push_back(vector<int>());  
        res[0].push_back(root->val);
        i++;
        //res.resize(i+1);
        while(!q.empty())
        {
            res.push_back(vector<int>());       
            int nodeCount = q.size();           
            while (nodeCount > 0) 
            {  
                temp = q.front();  
                //cout << temp->val << " ";  
                q.pop();  
                if(temp->left)
                {
                    q.push(temp->left); 
                    res[i].push_back(temp->left->val);
                }
                if(temp->right)
                {
                    q.push(temp->right); 
                    res[i].push_back(temp->right->val);
                }
                nodeCount--;  
            }  
        //cout << endl;  
        i++; 
            
        }
        //res.resize(i-1);
        res.pop_back();
        reverse(res.begin(),res.end());
        return res;
         
    }
};


RECURSIVE(NOT MINE)(LEETCODE DISCUSSIONS)
General Strategy: Use Recursive BFS to generate array of tree nodes by depth, then reverse the array.

class Solution {
public:   
    void search(TreeNode* node, vector<vector<int>>& vec, int depth) {
        // Adds to outer vector if new depth is hit
        if (vec.size() < depth) vec.push_back({});
        
        // Adds value to vector at its depth
        vec[depth - 1].push_back(node->val);
        
        // Search child nodes if they exist
        if(node->left) search(node->left, vec, depth + 1);
        if(node->right) search(node->right, vec, depth + 1);
    }
    
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        
        vector<vector<int>> ans;
        if (root)search(root, ans, 1);
       
        // Reverse & return vector from BFS
        std::reverse(ans.begin(), ans.end());
        return ans;
    }
};

